{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","filterBy","handleChange","event","target","name","value","setState","filterTodos","filteredTodos","props","todos","filter","todo","title","toLocaleLowerCase","includes","completed","handleUserSelection","this","className","type","onChange","map","classnames","checked","readOnly","onClick","userId","id","React","Component","API_URL","loadTodos","a","fetch","respone","json","loadUser","CurrentUser","user","reloadUser","prevProps","userClear","email","phone","App","selectedUserId","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2613a4b8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  handleUserSelection: (userId: number) => void;\n};\n\ninterface State {\n  query: string;\n  filterBy: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    filterBy: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, keyof State>);\n  };\n\n  filterTodos = () => {\n    let filteredTodos = this.props.todos.filter(todo => (\n      todo.title.toLocaleLowerCase().includes(this.state.query.toLocaleLowerCase())\n    ));\n\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (this.state.filterBy) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        case 'all':\n        default:\n          return todo;\n      }\n    });\n\n    return filteredTodos;\n  };\n\n  render() {\n    const { handleUserSelection } = this.props;\n    const { query, filterBy } = this.state;\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          className=\"TodoList__item\"\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={this.handleChange}\n        />\n\n        <select\n          className=\"TodoList__item\"\n          name=\"filterBy\"\n          value={filterBy}\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => (handleUserSelection(todo.userId))}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n\n            <li className=\"TodoList__item TodoList__item--checked\">\n              <label>\n                <input type=\"checkbox\" checked readOnly />\n                <p>distinctio vitae autem nihil ut molestias quo</p>\n              </label>\n\n              <button\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n              >\n                User&nbsp;#2\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export const TodoList: React.FC<Props> = (props) => {\n//   const { todos, handleUserSelection } = props;\n\n//   return (\n//     <div className=\"TodoList\">\n//       <h2>Todos:</h2>\n\n//       <div className=\"TodoList__list-container\">\n//         <ul className=\"TodoList__list\">\n//           {todos.map(todo => (\n//             <li\n//               key={todo.id}\n//               className={classnames(\n//                 'TodoList__item',\n//                 {\n//                   'TodoList__item--unchecked': !todo.completed,\n//                   'TodoList__item--checked': todo.completed,\n//                 },\n//               )}\n//             >\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={todo.completed}\n//                   readOnly\n//                 />\n//                 <p>{todo.title}</p>\n//               </label>\n\n//               <button\n//                 className=\"\n//                   TodoList__user-button\n//                   TodoList__user-button--selected\n//                   button\n//                 \"\n//                 type=\"button\"\n//                 onClick={() => (handleUserSelection(todo.userId))}\n//               >\n//                 User&nbsp;#\n//                 {todo.userId}\n//               </button>\n//             </li>\n//           ))}\n\n//           <li className=\"TodoList__item TodoList__item--checked\">\n//             <label>\n//               <input type=\"checkbox\" checked readOnly />\n//               <p>distinctio vitae autem nihil ut molestias quo</p>\n//             </label>\n\n//             <button\n//               className=\"TodoList__user-button button\"\n//               type=\"button\"\n//             >\n//               User&nbsp;#2\n//             </button>\n//           </li>\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async () => {\n  const respone = await fetch(`${API_URL}/todos`);\n\n  return respone.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const respone = await fetch(`${API_URL}/users/${userId}`);\n\n  return respone.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  userClear: () => void;\n};\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser(this.props.userId);\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { userClear } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n          <button\n            type=\"submit\"\n            className=\"button button--clear\"\n            onClick={userClear}\n          >\n            Clear\n          </button>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({ todos: data });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  userClear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            handleUserSelection={this.handleUserSelection}\n            todos={todos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userClear={this.userClear}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}